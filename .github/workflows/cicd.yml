# .github/workflows/cicd.yml
# Comprehensive CI/CD for llmsays: Build, Test, Package, Dockerize, and Publish
# Triggers: push (main), pull_request, release (tagged)
# Secrets needed (GitHub repo settings):
# - PYPI_API_TOKEN: PyPI token for publishing
# - DOCKERHUB_USERNAME: Docker Hub username
# - DOCKERHUB_TOKEN: Docker Hub token
# - OPENROUTER_API_KEY: For integration tests (optional, mocked in unit tests)

name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]  # Triggers release on tags like v0.1.0
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Manual trigger

jobs:
  # Job 1: Lint and Format Check (Code Quality)
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install lint deps
        run: |
          pip install black flake8

      - name: Run Black (format check)
        run: |
          black --check src/ tests/ examples/

      - name: Run Flake8 (lint)
        run: |
          flake8 src/ tests/ examples/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ tests/ examples/ --count --max-complexity=10 --max-line-length=88 --statistics

  # Job 2: Unit and Integration Tests
  test:
    needs: lint  # Run after lint passes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']  # Multi-version testing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install deps
        run: |
          pip install -e .[dev,test]
          pip install pytest pytest-mock

      - name: Run tests with coverage
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}  # Mocked in tests; real for integration if needed
        run: |
          pytest tests/ --cov=src/llmsays --cov-report=xml

      - name: Upload coverage to Codecov (optional, add CODECOV_TOKEN secret)
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
        if: success()

  # Job 3: Build Package (Wheel + Sdist)
  build-package:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # For version tagging

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install build tools
        run: |
          pip install build twine

      - name: Build package
        run: |
          python -m build --sdist --wheel --outdir dist/

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload artifact (wheels/sdists)
        uses: actions/upload-artifact@v4
        with:
          name: package-dist
          path: dist/

  # Job 4: Publish to PyPI (on tag/release)
  publish-pypi:
    needs: build-package
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')  # Only on version tags
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: package-dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist/
          skip-existing: true  # Avoid duplicates

  # Job 5: Build and Push Docker Image
  docker:
    needs: test  # After tests pass
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: yourdockerhubusername/llmsays  # Replace with your Docker Hub repo
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=yourdockerhubusername/llmsays:buildcache
          cache-to: type=registry,ref=yourdockerhubusername/llmsays:buildcache,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -e OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }} yourdockerhubusername/llmsays:latest "What is 2+2?" || echo "Docker test failed (expected if no key)"

  # Job 6: Release Notes (on tag)
  release:
    needs: [publish-pypi, docker]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write  # For creating release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate changelog
        uses: jaywcjlove/changelog-generator@v1.5.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          head-ref: ${{ github.ref }}
          filter-author: (github-actions|dependabot)

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          body_path: CHANGELOG.md
          draft: false
          prerelease: false