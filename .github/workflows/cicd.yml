# .github/workflows/cicd.yml
# Simplified CI/CD for llmsays: Lint, Test, Build, Dockerize, and Publish
# Focus: Essential jobs only (removed heavy coverage/Codecov, reduced matrix, optional changelog)
# Triggers: push (main), pull_request, release (tagged)
# Secrets needed:
# - PYPI_API_TOKEN: PyPI token
# - DOCKERHUB_USERNAME & DOCKERHUB_TOKEN: Docker Hub
# - OPENROUTER_API_KEY: For Docker test (mocked in unit tests)

name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Job 1: Lint and Format
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: pip install black flake8
      - run: black --check src/ tests/ examples/
      - run: flake8 src/ tests/ examples/ --max-complexity=10 --max-line-length=88

  # Job 2: Tests (single version, no coverage upload)
  test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'  # Single version for speed
      - run: pip install -e .[dev,test] pytest pytest-mock
      - run: pytest tests/  # Basic run, no cov XML/upload
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

  # Job 3: Build Package
  build-package:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - run: pip install build twine
      - run: python -m build --sdist --wheel --outdir dist/
      - run: twine check dist/*
      - uses: actions/upload-artifact@v4
        with:
          name: package-dist
          path: dist/

  # Job 4: Publish to PyPI (on tag)
  publish-pypi:
    needs: build-package
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: package-dist
          path: dist/
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages-dir: dist/
          skip-existing: true

  # Job 5: Build and Push Docker (includes basic test)
  docker:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: yourdockerhubusername/llmsays
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=sha
      - uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=yourdockerhubusername/llmsays:buildcache
          cache-to: type=registry,ref=yourdockerhubusername/llmsays:buildcache,mode=max
      - run: |
          docker run --rm -e OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }} yourdockerhubusername/llmsays:latest "What is 2+2?" || echo "Test skipped (key issue)"

  # Job 6: Release (lightweight, no changelog gen)
  release:
    needs: [publish-pypi, docker]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: package-dist
          path: dist/
      - uses: softprops/action-gh-release@v2
        with:
          files: dist/*
          body: "Automated release for tag ${{ github.ref }}. See artifacts."
          draft: false
          prerelease: false